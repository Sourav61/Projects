# -*- coding: utf-8 -*-
"""Day-7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Sourav61/Projects/blob/main/Employee%20Salary%20Prediction/Salary_Prediction.ipynb
"""

import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt

df = pd.read_csv("salaryData.csv")

df

df.head(10)

df.tail(10)

type(df)

df.dtypes

df.columns

df.shape

np.shape(df)

df.size

df.min()

df.max()

df.info()

df.describe(include="all")

df.iloc[2:6]

df.corr()

df.nunique()

x = df.iloc[:,:-1].values
y = df.iloc[:,1].values
plt.xlabel("Years of experience")
plt.ylabel("Salary")
plt.scatter(x,y,color='green',marker='*')
plt.show()

import sklearn 
from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=1/3,random_state=1)

from sklearn.linear_model import LinearRegression
model = LinearRegression()

model.fit(xtrain, ytrain)

xtrain.shape

y_pred = model.predict(xtest)
y_pred

ytest

model.predict([[9]])

model.coef_

model.intercept_

plt.scatter(xtrain, ytrain, color="red")
plt.plot(xtrain, model.predict(xtrain))
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math

# x = np.array([1,2,3,4,5])
# y = np.array([5,8,11,14,17])

# def gradient(x,y): 
#   a = 0 
#   b = 0
#   rate = 0.001

#   n = len(x)

#   plt.scatter(x,y,color='m')
#   cost_old = 0
#   for i in range(100):
#       y_pred = a*x + b
#       cost = (1/n)*sum([value**2 for value in (y-y_pred)])
#       print(a, b, i, cost)
#       plt.plot(x,y_pred,color='c')
#       ad = -(2/n)*sum(x*(y-y_pred))
#       yd = -(2/n)*sum(y-y_pred)
#       a -= rate*ad
#       b -= rate*yd
      
#       if math.isclose(cost,cost_old):
#         break
#       cost_old = cost
#       return a,b

# df = pd.read_csv('salaryData.csv')
# x = np.array(df['YearsExperience'])
# y = np.array(df['Salary'])

# m,b = gradient(x,y)
# print(m,b)


x=np.array([1,2,3,4,5])   # y=3x+2
y = np.array([5,8,11,14,17])
def gradient(x,y):
  a=0
  b=0
  rate=0.01
  n=len(x)
  plt.scatter(x,y,color='red')
  cost_old=0
  for i in range(1000):
    y_pred = a*x+b
    cost = (1/n)*sum([value**2 for value in (y - y_pred)])
    print(a,b,i,cost)
    plt.plot(x,y_pred, cost)
    ad = -(2/n)*sum(x*(y-y_pred))
    yd = -(2/n)*sum(y-y_pred)
    a = a - rate*ad
    b = b-rate*yd
    if math.isclose(cost,cost_old):
      break
    cost_old = cost
    return a,b

df = pd.read_csv("salaryData.csv")
x = np.array(df['YearsExperience'])
y = np.array(df['Salary'])

m,b = gradient(x,y)
print(m,b)

import pickle

with open('modelsave_pickle','wb') as file:
  pickle.dump(model,file)

with open('modelsave_pickle','rb') as file:
  newmodel = pickle.load(file)

newmodel.predict([[5]])

newmodel.coef_

from sklearn.externals import joblib
joblib.dump(model, 'model_joblib')

mymodel = joblib.load('model_joblib')

mymodel.predict([[5]])

mymodel.coef_