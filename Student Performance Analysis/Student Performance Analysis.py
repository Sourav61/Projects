# -*- coding: utf-8 -*-
"""02_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N1FvtqoCZcFkETu5t7D-4RB5Mi521aF2
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras 
import os
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("student-mat.csv",sep=';')
df

df.head(10)

df.tail(10)

print(f'school: {df.school.unique()}')
print(f'sex: {df.sex.unique()}')
print(f'address: {df.address.unique()}')
print(f'Mjob: {df.Mjob.unique()}')
print(f'Fjob: {df.Fjob.unique()}')
print(f'higher: {df.higher.unique()}')

df['school'] = df['school'].apply({'GP':1, 'MS':2}.get)
df['sex'] = df['sex'].apply({'F':1, 'M':2}.get)
df['address'] = df['address'].apply({'U':1, 'R':2}.get)
df['higher'] = df['higher'].apply({'yes':1, 'no':2}.get)


#multi-valued
df['Mjob'] = df['Mjob'].apply({'at_home':1, 'health':2, 'other':3, 'services':4, 'teacher':5}.get)
df['Fjob'] = df['Fjob'].apply({'at_home':1, 'health':2, 'other':3, 'services':4, 'teacher':5}.get)

df.head(15)

df.head(3)

df = df[['school', 'sex', 'address', 'Mjob', 'Fjob', 'higher', 'freetime', 'studytime', 'absences', 'G1', 'G2', 'G3']]

df.head()

df.to_csv('cleanedMathData.csv') #export the mathData as cleanedMathData as csv file

import seaborn as sns
sns.palplot(sns.color_palette('PuOr'))
pal = sns.color_palette('PuOr', 6) 
pal.as_hex() 

import matplotlib.pyplot as plt
plt.style.use(['seaborn'])
sns_colors = ['#c6690c', '#664697']
sns.set_palette(sns_colors) 
sns.palplot(sns.color_palette(sns_colors))

print(f"There are {len(df.columns)} in the dataframe df namely,{df.columns}")

sns.pairplot(df,
             x_vars = ['school', 'sex', 'address', 'higher','studytime', 'absences', 'G1', 'G2', 'G3'],
             y_vars = ['school', 'sex', 'address', 'higher', 'freetime','studytime', 'absences', 'G1', 'G2', 'G3'],
             diag_kind='kde', hue="G3"
             )

plt.show()

sns.pairplot(df)

fig, axarr = plt.subplots(3,2, figsize=(10,10))

sns.stripplot(y='G1', x='G2', data=df, hue=None, ax=axarr[0][0])
sns.stripplot(y='G1', x='G3', data=df, hue=None, ax=axarr[0][1])
sns.stripplot(y='studytime', x='G3', data=df, hue=None, ax=axarr[1][0])
sns.stripplot(y='freetime', x='G3', data=df, hue=None,  ax=axarr[1][1])
sns.stripplot(y='higher', x='G3', data=df, hue=None, ax=axarr[2][0])
sns.stripplot(y='absences', x='G3', data=df, hue=None, ax=axarr[2][1])

plt.show()

trainDataset = df.sample(frac=0.8, random_state=0) 
testDataset = df.drop(trainDataset.index)

print(trainDataset.head())
print(testDataset.head())

print(trainDataset.shape)
print(testDataset.shape)

trainFeatures = trainDataset.copy()
testFeatures = testDataset.copy()

print(trainFeatures.head())
print(testFeatures.head())

trainLabels = trainFeatures.pop('G3')
testLabels = testFeatures.pop('G3')

print(trainLabels.head())
print(testLabels.head())

print(trainFeatures.head())
print(testFeatures.head())

model = tf.keras.Sequential([
                             tf.keras.layers.Dense(1)

])

model.compile(
    loss = 'mean_absolute_error',
    optimizer = tf.keras.optimizers.Adam(0.001),
    metrics = ['mae', 'mse']
)

numEpochs = 300
history = model.fit(x = trainFeatures, y = trainLabels, validation_data = (testFeatures, testLabels), epochs = numEpochs)

print(history)

model.summary()

import matplotlib.pyplot as plt

def plotGraphs(history, string): 
  plt.plot(history.history[string])
  plt.plot(history.history[f'val_{string}'])
  plt.xlabel('Number of Epochs')
  plt.ylabel(string)
  plt.legend([string, f'val_{string}'])
  plt.show()

plotGraphs(history, 'loss')
plotGraphs(history, 'mae')
plotGraphs(history, 'mse')

testPreds = model.predict(testFeatures).flatten()

def predPlot(labels, predictions):
  plt.scatter(labels, predictions)
  plt.ylabel('Predictions')
  plt.xlabel('True Value or Labels')
  plt.axis('equal')
  plt.axis('square')
  plt.xlim([0, plt.xlim()[1]])
  plt.ylim([0, plt.ylim()[1]])
  plt.plot([-100, 100], [-100,100])
  plt.show()

predPlot(testLabels, testPreds)

def errorPlot(preds, labels, counts):
  errors = preds - labels
  plt.hist(errors, counts)
  plt.xlabel('Error')
  plt.ylabel('Counts')
  plt.show()

errorPlot(testPreds, testLabels, numEpochs)