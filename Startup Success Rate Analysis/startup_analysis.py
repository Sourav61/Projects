# -*- coding: utf-8 -*-
"""Startup_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zDHz8EpR48MPOy3Ls7knQ2L7DuPi4PYN

<a href="https://colab.research.google.com/github/Sourav61/Goeduhub-Assignments/blob/main/Task_8.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>
"""

# from google.colab import drive
# drive.mount('/content/drive')

"""Author: <a href = "https://github.com/Sourav61">Sourav Pahwa</a>
<br>ID: GO_STP_13420

<b>Task-8: Predicting a Startups Profit/Success Rate using Multiple Linear Regression in Python-Download Data Set <a href="https://drive.google.com/file/d/1swu61s27pXByZX5tSm4yMZ9ZMENUTASG/view">click here.</a><br /></b>

Here 50 startups dataset containing 5 columns  like <b>“R&D Spend”, “Administration”, “Marketing Spend”, “State”, “Profit”.</b>

In this dataset first 3 columns provides you spending on Research , Administration and Marketing respectively. State indicates startup based on that state. Profit indicates how much profits earned by a startup.

Clearly, we can understand that it is a multiple linear regression problem, as the independent variables are more than one.

<b>Prepare a prediction model for profit of 50_Startups data in Python</b>
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import missingno as msno
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("50_Startups.csv")
df

dummies = pd.get_dummies(df.State)
dummies

merge = pd.concat([df,dummies],axis='columns')
merge

final = merge.drop(['State'],axis='columns')

final = final.drop(['New York'],axis='columns')

# from sklearn.preprocessing import LabelEncoder
# le = LabelEncoder()

# newdf = df

# newdf.State = le.fit_transform(newdf.State)
# newdf.head()

# from sklearn.preprocessing import OneHotEncoder

# from sklearn.compose import ColumnTransformer

# ct = ColumnTransformer([('State',OneHotEncoder(),[3])],remainder = 'passthrough')

# newct = ct.fit_transform(df)
# newct

final.head(10)

final.tail(10)

final.info()

final.describe(include="all")

final.shape

final.size

final.columns

final.dtypes

final.boxplot(rot=45)

final.axes

final.duplicated().any()

final.kurt()

final.skew()

final.keys()

final.isna().any()

final.isna().sum()

msno.matrix(final.sample(50))

msno.bar(final.sample(50))

msno.dendrogram(final.sample(50))

final.corr()

sns.heatmap(final.corr(), cmap='rainbow', annot = True)

plt.figure(figsize=(14,14))
sns.heatmap(final.cov(), annot=True, fmt =".2f",square=True,cmap='jet_r')
plt.title("Covariation",fontsize = 15)
plt.show()

import random
import matplotlib.colors as mcolors
colors = random.choices(list(mcolors.CSS4_COLORS.values()))

mcolors.TABLEAU_COLORS
mcolors.BASE_COLORS
mcolors.CSS4_COLORS

plt.figure(figsize=(10,10))
colors = ['#483D8B','#8FBC8F','#C71585']
df.State.value_counts().plot.pie(autopct='%.0f%%',labels=df.State.unique(),shadow = True,startangle = 90,colors=colors)
plt.title('Count of State',fontsize=20)
plt.show()

from sklearn.model_selection import train_test_split

x = final.drop(['Profit'], axis=1)
y = final['Profit']

x[:10]

y[:10]

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size = 0.2, random_state = 5)

from sklearn.metrics import mean_squared_log_error, mean_squared_error,r2_score, mean_absolute_error
from sklearn.model_selection import cross_val_score

from sklearn.linear_model import LinearRegression
lm = LinearRegression(normalize=True,n_jobs=-1)
lm.fit(xtrain , ytrain)

lm.get_params(deep=True)

y_pred_train = lm.predict(xtrain)
y_pred_test = lm.predict(xtest)

df1 = pd.DataFrame(y_pred_test, ytest)
df1.head(10)

from sklearn.metrics import mean_squared_error, mean_absolute_error ,r2_score
print("The Mean Squared Error is: ", end=" ")
mse = mean_squared_error(y_pred_test,ytest)
print(mse)
print("The Mean Absolute Error is: ", end=" ")
mae = mean_absolute_error(y_pred_test, ytest)
print(mae)

print('The R2 Score is: %0.2f ' % r2_score(ytest, y_pred_test))

plt.scatter(ytest, y_pred_test,c='m', marker="^")
plt.plot(ytest, lm.predict(xtest))
plt.show()